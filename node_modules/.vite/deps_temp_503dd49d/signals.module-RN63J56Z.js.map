{
  "version": 3,
  "sources": ["../../preact/hooks/src/index.js", "../../@preact/signals-core/src/index.ts", "../../@preact/signals/src/index.ts"],
  "sourcesContent": ["import { options } from 'preact';\n\n/** @type {number} */\nlet currentIndex;\n\n/** @type {import('./internal').Component} */\nlet currentComponent;\n\n/** @type {import('./internal').Component} */\nlet previousComponent;\n\n/** @type {number} */\nlet currentHook = 0;\n\n/** @type {Array<import('./internal').Component>} */\nlet afterPaintEffects = [];\n\nlet EMPTY = [];\n\nlet oldBeforeDiff = options._diff;\nlet oldBeforeRender = options._render;\nlet oldAfterDiff = options.diffed;\nlet oldCommit = options._commit;\nlet oldBeforeUnmount = options.unmount;\n\nconst RAF_TIMEOUT = 100;\nlet prevRaf;\n\noptions._diff = vnode => {\n\tcurrentComponent = null;\n\tif (oldBeforeDiff) oldBeforeDiff(vnode);\n};\n\noptions._render = vnode => {\n\tif (oldBeforeRender) oldBeforeRender(vnode);\n\n\tcurrentComponent = vnode._component;\n\tcurrentIndex = 0;\n\n\tconst hooks = currentComponent.__hooks;\n\tif (hooks) {\n\t\tif (previousComponent === currentComponent) {\n\t\t\thooks._pendingEffects = [];\n\t\t\tcurrentComponent._renderCallbacks = [];\n\t\t\thooks._list.forEach(hookItem => {\n\t\t\t\tif (hookItem._nextValue) {\n\t\t\t\t\thookItem._value = hookItem._nextValue;\n\t\t\t\t}\n\t\t\t\thookItem._pendingValue = EMPTY;\n\t\t\t\thookItem._nextValue = hookItem._pendingArgs = undefined;\n\t\t\t});\n\t\t} else {\n\t\t\thooks._pendingEffects.forEach(invokeCleanup);\n\t\t\thooks._pendingEffects.forEach(invokeEffect);\n\t\t\thooks._pendingEffects = [];\n\t\t\tcurrentIndex = 0;\n\t\t}\n\t}\n\tpreviousComponent = currentComponent;\n};\n\noptions.diffed = vnode => {\n\tif (oldAfterDiff) oldAfterDiff(vnode);\n\n\tconst c = vnode._component;\n\tif (c && c.__hooks) {\n\t\tif (c.__hooks._pendingEffects.length) afterPaint(afterPaintEffects.push(c));\n\t\tc.__hooks._list.forEach(hookItem => {\n\t\t\tif (hookItem._pendingArgs) {\n\t\t\t\thookItem._args = hookItem._pendingArgs;\n\t\t\t}\n\t\t\tif (hookItem._pendingValue !== EMPTY) {\n\t\t\t\thookItem._value = hookItem._pendingValue;\n\t\t\t}\n\t\t\thookItem._pendingArgs = undefined;\n\t\t\thookItem._pendingValue = EMPTY;\n\t\t});\n\t}\n\tpreviousComponent = currentComponent = null;\n};\n\noptions._commit = (vnode, commitQueue) => {\n\tcommitQueue.some(component => {\n\t\ttry {\n\t\t\tcomponent._renderCallbacks.forEach(invokeCleanup);\n\t\t\tcomponent._renderCallbacks = component._renderCallbacks.filter(cb =>\n\t\t\t\tcb._value ? invokeEffect(cb) : true\n\t\t\t);\n\t\t} catch (e) {\n\t\t\tcommitQueue.some(c => {\n\t\t\t\tif (c._renderCallbacks) c._renderCallbacks = [];\n\t\t\t});\n\t\t\tcommitQueue = [];\n\t\t\toptions._catchError(e, component._vnode);\n\t\t}\n\t});\n\n\tif (oldCommit) oldCommit(vnode, commitQueue);\n};\n\noptions.unmount = vnode => {\n\tif (oldBeforeUnmount) oldBeforeUnmount(vnode);\n\n\tconst c = vnode._component;\n\tif (c && c.__hooks) {\n\t\tlet hasErrored;\n\t\tc.__hooks._list.forEach(s => {\n\t\t\ttry {\n\t\t\t\tinvokeCleanup(s);\n\t\t\t} catch (e) {\n\t\t\t\thasErrored = e;\n\t\t\t}\n\t\t});\n\t\tc.__hooks = undefined;\n\t\tif (hasErrored) options._catchError(hasErrored, c._vnode);\n\t}\n};\n\n/**\n * Get a hook's state from the currentComponent\n * @param {number} index The index of the hook to get\n * @param {number} type The index of the hook to get\n * @returns {any}\n */\nfunction getHookState(index, type) {\n\tif (options._hook) {\n\t\toptions._hook(currentComponent, index, currentHook || type);\n\t}\n\tcurrentHook = 0;\n\n\t// Largely inspired by:\n\t// * https://github.com/michael-klein/funcy.js/blob/f6be73468e6ec46b0ff5aa3cc4c9baf72a29025a/src/hooks/core_hooks.mjs\n\t// * https://github.com/michael-klein/funcy.js/blob/650beaa58c43c33a74820a3c98b3c7079cf2e333/src/renderer.mjs\n\t// Other implementations to look at:\n\t// * https://codesandbox.io/s/mnox05qp8\n\tconst hooks =\n\t\tcurrentComponent.__hooks ||\n\t\t(currentComponent.__hooks = {\n\t\t\t_list: [],\n\t\t\t_pendingEffects: []\n\t\t});\n\n\tif (index >= hooks._list.length) {\n\t\thooks._list.push({ _pendingValue: EMPTY });\n\t}\n\treturn hooks._list[index];\n}\n\n/**\n * @param {import('./index').StateUpdater<any>} [initialState]\n */\nexport function useState(initialState) {\n\tcurrentHook = 1;\n\treturn useReducer(invokeOrReturn, initialState);\n}\n\n/**\n * @param {import('./index').Reducer<any, any>} reducer\n * @param {import('./index').StateUpdater<any>} initialState\n * @param {(initialState: any) => void} [init]\n * @returns {[ any, (state: any) => void ]}\n */\nexport function useReducer(reducer, initialState, init) {\n\t/** @type {import('./internal').ReducerHookState} */\n\tconst hookState = getHookState(currentIndex++, 2);\n\thookState._reducer = reducer;\n\tif (!hookState._component) {\n\t\thookState._value = [\n\t\t\t!init ? invokeOrReturn(undefined, initialState) : init(initialState),\n\n\t\t\taction => {\n\t\t\t\tconst currentValue = hookState._nextValue\n\t\t\t\t\t? hookState._nextValue[0]\n\t\t\t\t\t: hookState._value[0];\n\t\t\t\tconst nextValue = hookState._reducer(currentValue, action);\n\n\t\t\t\tif (currentValue !== nextValue) {\n\t\t\t\t\thookState._nextValue = [nextValue, hookState._value[1]];\n\t\t\t\t\thookState._component.setState({});\n\t\t\t\t}\n\t\t\t}\n\t\t];\n\n\t\thookState._component = currentComponent;\n\n\t\tif (!currentComponent._hasScuFromHooks) {\n\t\t\tcurrentComponent._hasScuFromHooks = true;\n\t\t\tlet prevScu = currentComponent.shouldComponentUpdate;\n\t\t\tconst prevCWU = currentComponent.componentWillUpdate;\n\n\t\t\t// If we're dealing with a forced update `shouldComponentUpdate` will\n\t\t\t// not be called. But we use that to update the hook values, so we\n\t\t\t// need to call it.\n\t\t\tcurrentComponent.componentWillUpdate = function (p, s, c) {\n\t\t\t\tif (this._force) {\n\t\t\t\t\tlet tmp = prevScu;\n\t\t\t\t\t// Clear to avoid other sCU hooks from being called\n\t\t\t\t\tprevScu = undefined;\n\t\t\t\t\tupdateHookState(p, s, c);\n\t\t\t\t\tprevScu = tmp;\n\t\t\t\t}\n\n\t\t\t\tif (prevCWU) prevCWU.call(this, p, s, c);\n\t\t\t};\n\n\t\t\t// This SCU has the purpose of bailing out after repeated updates\n\t\t\t// to stateful hooks.\n\t\t\t// we store the next value in _nextValue[0] and keep doing that for all\n\t\t\t// state setters, if we have next states and\n\t\t\t// all next states within a component end up being equal to their original state\n\t\t\t// we are safe to bail out for this specific component.\n\t\t\t/**\n\t\t\t *\n\t\t\t * @type {import('./internal').Component[\"shouldComponentUpdate\"]}\n\t\t\t */\n\t\t\t// @ts-ignore - We don't use TS to downtranspile\n\t\t\t// eslint-disable-next-line no-inner-declarations\n\t\t\tfunction updateHookState(p, s, c) {\n\t\t\t\tif (!hookState._component.__hooks) return true;\n\n\t\t\t\tconst stateHooks = hookState._component.__hooks._list.filter(\n\t\t\t\t\tx => x._component\n\t\t\t\t);\n\t\t\t\tconst allHooksEmpty = stateHooks.every(x => !x._nextValue);\n\t\t\t\t// When we have no updated hooks in the component we invoke the previous SCU or\n\t\t\t\t// traverse the VDOM tree further.\n\t\t\t\tif (allHooksEmpty) {\n\t\t\t\t\treturn prevScu ? prevScu.call(this, p, s, c) : true;\n\t\t\t\t}\n\n\t\t\t\t// We check whether we have components with a nextValue set that\n\t\t\t\t// have values that aren't equal to one another this pushes\n\t\t\t\t// us to update further down the tree\n\t\t\t\tlet shouldUpdate = false;\n\t\t\t\tstateHooks.forEach(hookItem => {\n\t\t\t\t\tif (hookItem._nextValue) {\n\t\t\t\t\t\tconst currentValue = hookItem._value[0];\n\t\t\t\t\t\thookItem._value = hookItem._nextValue;\n\t\t\t\t\t\thookItem._nextValue = undefined;\n\t\t\t\t\t\tif (currentValue !== hookItem._value[0]) shouldUpdate = true;\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\treturn shouldUpdate || hookState._component.props !== p\n\t\t\t\t\t? prevScu\n\t\t\t\t\t\t? prevScu.call(this, p, s, c)\n\t\t\t\t\t\t: true\n\t\t\t\t\t: false;\n\t\t\t}\n\n\t\t\tcurrentComponent.shouldComponentUpdate = updateHookState;\n\t\t}\n\t}\n\n\treturn hookState._nextValue || hookState._value;\n}\n\n/**\n * @param {import('./internal').Effect} callback\n * @param {any[]} args\n */\nexport function useEffect(callback, args) {\n\t/** @type {import('./internal').EffectHookState} */\n\tconst state = getHookState(currentIndex++, 3);\n\tif (!options._skipEffects && argsChanged(state._args, args)) {\n\t\tstate._value = callback;\n\t\tstate._pendingArgs = args;\n\n\t\tcurrentComponent.__hooks._pendingEffects.push(state);\n\t}\n}\n\n/**\n * @param {import('./internal').Effect} callback\n * @param {any[]} args\n */\nexport function useLayoutEffect(callback, args) {\n\t/** @type {import('./internal').EffectHookState} */\n\tconst state = getHookState(currentIndex++, 4);\n\tif (!options._skipEffects && argsChanged(state._args, args)) {\n\t\tstate._value = callback;\n\t\tstate._pendingArgs = args;\n\n\t\tcurrentComponent._renderCallbacks.push(state);\n\t}\n}\n\nexport function useRef(initialValue) {\n\tcurrentHook = 5;\n\treturn useMemo(() => ({ current: initialValue }), []);\n}\n\n/**\n * @param {object} ref\n * @param {() => object} createHandle\n * @param {any[]} args\n */\nexport function useImperativeHandle(ref, createHandle, args) {\n\tcurrentHook = 6;\n\tuseLayoutEffect(\n\t\t() => {\n\t\t\tif (typeof ref == 'function') {\n\t\t\t\tref(createHandle());\n\t\t\t\treturn () => ref(null);\n\t\t\t} else if (ref) {\n\t\t\t\tref.current = createHandle();\n\t\t\t\treturn () => (ref.current = null);\n\t\t\t}\n\t\t},\n\t\targs == null ? args : args.concat(ref)\n\t);\n}\n\n/**\n * @param {() => any} factory\n * @param {any[]} args\n */\nexport function useMemo(factory, args) {\n\t/** @type {import('./internal').MemoHookState} */\n\tconst state = getHookState(currentIndex++, 7);\n\tif (argsChanged(state._args, args)) {\n\t\tstate._pendingValue = factory();\n\t\tstate._pendingArgs = args;\n\t\tstate._factory = factory;\n\t\treturn state._pendingValue;\n\t}\n\n\treturn state._value;\n}\n\n/**\n * @param {() => void} callback\n * @param {any[]} args\n */\nexport function useCallback(callback, args) {\n\tcurrentHook = 8;\n\treturn useMemo(() => callback, args);\n}\n\n/**\n * @param {import('./internal').PreactContext} context\n */\nexport function useContext(context) {\n\tconst provider = currentComponent.context[context._id];\n\t// We could skip this call here, but than we'd not call\n\t// `options._hook`. We need to do that in order to make\n\t// the devtools aware of this hook.\n\t/** @type {import('./internal').ContextHookState} */\n\tconst state = getHookState(currentIndex++, 9);\n\t// The devtools needs access to the context object to\n\t// be able to pull of the default value when no provider\n\t// is present in the tree.\n\tstate._context = context;\n\tif (!provider) return context._defaultValue;\n\t// This is probably not safe to convert to \"!\"\n\tif (state._value == null) {\n\t\tstate._value = true;\n\t\tprovider.sub(currentComponent);\n\t}\n\treturn provider.props.value;\n}\n\n/**\n * Display a custom label for a custom hook for the devtools panel\n * @type {<T>(value: T, cb?: (value: T) => string | number) => void}\n */\nexport function useDebugValue(value, formatter) {\n\tif (options.useDebugValue) {\n\t\toptions.useDebugValue(formatter ? formatter(value) : value);\n\t}\n}\n\n/**\n * @param {(error: any, errorInfo: import('preact').ErrorInfo) => void} cb\n */\nexport function useErrorBoundary(cb) {\n\t/** @type {import('./internal').ErrorBoundaryHookState} */\n\tconst state = getHookState(currentIndex++, 10);\n\tconst errState = useState();\n\tstate._value = cb;\n\tif (!currentComponent.componentDidCatch) {\n\t\tcurrentComponent.componentDidCatch = (err, errorInfo) => {\n\t\t\tif (state._value) state._value(err, errorInfo);\n\t\t\terrState[1](err);\n\t\t};\n\t}\n\treturn [\n\t\terrState[0],\n\t\t() => {\n\t\t\terrState[1](undefined);\n\t\t}\n\t];\n}\n\nexport function useId() {\n\tconst state = getHookState(currentIndex++, 11);\n\tif (!state._value) {\n\t\t// Grab either the root node or the nearest async boundary node.\n\t\t/** @type {import('./internal.d').VNode} */\n\t\tlet root = currentComponent._vnode;\n\t\twhile (root !== null && !root._mask && root._parent !== null) {\n\t\t\troot = root._parent;\n\t\t}\n\n\t\tlet mask = root._mask || (root._mask = [0, 0]);\n\t\tstate._value = 'P' + mask[0] + '-' + mask[1]++;\n\t}\n\n\treturn state._value;\n}\n/**\n * After paint effects consumer.\n */\nfunction flushAfterPaintEffects() {\n\tlet component;\n\twhile ((component = afterPaintEffects.shift())) {\n\t\tif (!component._parentDom || !component.__hooks) continue;\n\t\ttry {\n\t\t\tcomponent.__hooks._pendingEffects.forEach(invokeCleanup);\n\t\t\tcomponent.__hooks._pendingEffects.forEach(invokeEffect);\n\t\t\tcomponent.__hooks._pendingEffects = [];\n\t\t} catch (e) {\n\t\t\tcomponent.__hooks._pendingEffects = [];\n\t\t\toptions._catchError(e, component._vnode);\n\t\t}\n\t}\n}\n\nlet HAS_RAF = typeof requestAnimationFrame == 'function';\n\n/**\n * Schedule a callback to be invoked after the browser has a chance to paint a new frame.\n * Do this by combining requestAnimationFrame (rAF) + setTimeout to invoke a callback after\n * the next browser frame.\n *\n * Also, schedule a timeout in parallel to the the rAF to ensure the callback is invoked\n * even if RAF doesn't fire (for example if the browser tab is not visible)\n *\n * @param {() => void} callback\n */\nfunction afterNextFrame(callback) {\n\tconst done = () => {\n\t\tclearTimeout(timeout);\n\t\tif (HAS_RAF) cancelAnimationFrame(raf);\n\t\tsetTimeout(callback);\n\t};\n\tconst timeout = setTimeout(done, RAF_TIMEOUT);\n\n\tlet raf;\n\tif (HAS_RAF) {\n\t\traf = requestAnimationFrame(done);\n\t}\n}\n\n// Note: if someone used options.debounceRendering = requestAnimationFrame,\n// then effects will ALWAYS run on the NEXT frame instead of the current one, incurring a ~16ms delay.\n// Perhaps this is not such a big deal.\n/**\n * Schedule afterPaintEffects flush after the browser paints\n * @param {number} newQueueLength\n */\nfunction afterPaint(newQueueLength) {\n\tif (newQueueLength === 1 || prevRaf !== options.requestAnimationFrame) {\n\t\tprevRaf = options.requestAnimationFrame;\n\t\t(prevRaf || afterNextFrame)(flushAfterPaintEffects);\n\t}\n}\n\n/**\n * @param {import('./internal').EffectHookState} hook\n */\nfunction invokeCleanup(hook) {\n\t// A hook cleanup can introduce a call to render which creates a new root, this will call options.vnode\n\t// and move the currentComponent away.\n\tconst comp = currentComponent;\n\tlet cleanup = hook._cleanup;\n\tif (typeof cleanup == 'function') {\n\t\thook._cleanup = undefined;\n\t\tcleanup();\n\t}\n\n\tcurrentComponent = comp;\n}\n\n/**\n * Invoke a Hook's effect\n * @param {import('./internal').EffectHookState} hook\n */\nfunction invokeEffect(hook) {\n\t// A hook call can introduce a call to render which creates a new root, this will call options.vnode\n\t// and move the currentComponent away.\n\tconst comp = currentComponent;\n\thook._cleanup = hook._value();\n\tcurrentComponent = comp;\n}\n\n/**\n * @param {any[]} oldArgs\n * @param {any[]} newArgs\n */\nfunction argsChanged(oldArgs, newArgs) {\n\treturn (\n\t\t!oldArgs ||\n\t\toldArgs.length !== newArgs.length ||\n\t\tnewArgs.some((arg, index) => arg !== oldArgs[index])\n\t);\n}\n\nfunction invokeOrReturn(arg, f) {\n\treturn typeof f == 'function' ? f(arg) : f;\n}\n", "function cycleDetected(): never {\n\tthrow new Error(\"Cycle detected\");\n}\nfunction mutationDetected(): never {\n\tthrow new Error(\"Computed cannot have side-effects\");\n}\n\n// Flags for Computed and Effect.\nconst RUNNING = 1 << 0;\nconst NOTIFIED = 1 << 1;\nconst OUTDATED = 1 << 2;\nconst DISPOSED = 1 << 3;\nconst HAS_ERROR = 1 << 4;\nconst TRACKING = 1 << 5;\n\n// A linked list node used to track dependencies (sources) and dependents (targets).\n// Also used to remember the source's last version number that the target saw.\ntype Node = {\n\t// A source whose value the target depends on.\n\t_source: Signal;\n\t_prevSource?: Node;\n\t_nextSource?: Node;\n\n\t// A target that depends on the source and should be notified when the source changes.\n\t_target: Computed | Effect;\n\t_prevTarget?: Node;\n\t_nextTarget?: Node;\n\n\t// The version number of the source that target has last seen. We use version numbers\n\t// instead of storing the source value, because source values can take arbitrary amount\n\t// of memory, and computeds could hang on to them forever because they're lazily evaluated.\n\t// Use the special value -1 to mark potentially unused but recyclable nodes.\n\t_version: number;\n\n\t// Used to remember & roll back the source's previous `._node` value when entering &\n\t// exiting a new evaluation context.\n\t_rollbackNode?: Node;\n};\n\nfunction startBatch() {\n\tbatchDepth++;\n}\n\nfunction endBatch() {\n\tif (batchDepth > 1) {\n\t\tbatchDepth--;\n\t\treturn;\n\t}\n\n\tlet error: unknown;\n\tlet hasError = false;\n\n\twhile (batchedEffect !== undefined) {\n\t\tlet effect: Effect | undefined = batchedEffect;\n\t\tbatchedEffect = undefined;\n\n\t\tbatchIteration++;\n\n\t\twhile (effect !== undefined) {\n\t\t\tconst next: Effect | undefined = effect._nextBatchedEffect;\n\t\t\teffect._nextBatchedEffect = undefined;\n\t\t\teffect._flags &= ~NOTIFIED;\n\n\t\t\tif (!(effect._flags & DISPOSED) && needsToRecompute(effect)) {\n\t\t\t\ttry {\n\t\t\t\t\teffect._callback();\n\t\t\t\t} catch (err) {\n\t\t\t\t\tif (!hasError) {\n\t\t\t\t\t\terror = err;\n\t\t\t\t\t\thasError = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\teffect = next;\n\t\t}\n\t}\n\tbatchIteration = 0;\n\tbatchDepth--;\n\n\tif (hasError) {\n\t\tthrow error;\n\t}\n}\n\nfunction batch<T>(callback: () => T): T {\n\tif (batchDepth > 0) {\n\t\treturn callback();\n\t}\n\t/*@__INLINE__**/ startBatch();\n\ttry {\n\t\treturn callback();\n\t} finally {\n\t\tendBatch();\n\t}\n}\n\n// Currently evaluated computed or effect.\nlet evalContext: Computed | Effect | undefined = undefined;\n\n// Effects collected into a batch.\nlet batchedEffect: Effect | undefined = undefined;\nlet batchDepth = 0;\nlet batchIteration = 0;\n\n// A global version number for signals, used for fast-pathing repeated\n// computed.peek()/computed.value calls when nothing has changed globally.\nlet globalVersion = 0;\n\nfunction addDependency(signal: Signal): Node | undefined {\n\tif (evalContext === undefined) {\n\t\treturn undefined;\n\t}\n\n\tlet node = signal._node;\n\tif (node === undefined || node._target !== evalContext) {\n\t\t/**\n\t\t * `signal` is a new dependency. Create a new dependency node, and set it\n\t\t * as the tail of the current context's dependency list. e.g:\n\t\t *\n\t\t * { A <-> B       }\n\t\t *         ↑     ↑\n\t\t *        tail  node (new)\n\t\t *               ↓\n\t\t * { A <-> B <-> C }\n\t\t *               ↑\n\t\t *              tail (evalContext._sources)\n\t\t */\n\t\tnode = {\n\t\t\t_version: 0,\n\t\t\t_source: signal,\n\t\t\t_prevSource: evalContext._sources,\n\t\t\t_nextSource: undefined,\n\t\t\t_target: evalContext,\n\t\t\t_prevTarget: undefined,\n\t\t\t_nextTarget: undefined,\n\t\t\t_rollbackNode: node,\n\t\t};\n\n\t\tif (evalContext._sources !== undefined) {\n\t\t\tevalContext._sources._nextSource = node;\n\t\t}\n\t\tevalContext._sources = node;\n\t\tsignal._node = node;\n\n\t\t// Subscribe to change notifications from this dependency if we're in an effect\n\t\t// OR evaluating a computed signal that in turn has subscribers.\n\t\tif (evalContext._flags & TRACKING) {\n\t\t\tsignal._subscribe(node);\n\t\t}\n\t\treturn node;\n\t} else if (node._version === -1) {\n\t\t// `signal` is an existing dependency from a previous evaluation. Reuse it.\n\t\tnode._version = 0;\n\n\t\t/**\n\t\t * If `node` is not already the current tail of the dependency list (i.e.\n\t\t * there is a next node in the list), then make the `node` the new tail. e.g:\n\t\t *\n\t\t * { A <-> B <-> C <-> D }\n\t\t *         ↑           ↑\n\t\t *        node   ┌─── tail (evalContext._sources)\n\t\t *         └─────│─────┐\n\t\t *               ↓     ↓\n\t\t * { A <-> C <-> D <-> B }\n\t\t *                     ↑\n\t\t *                    tail (evalContext._sources)\n\t\t */\n\t\tif (node._nextSource !== undefined) {\n\t\t\tnode._nextSource._prevSource = node._prevSource;\n\n\t\t\tif (node._prevSource !== undefined) {\n\t\t\t\tnode._prevSource._nextSource = node._nextSource;\n\t\t\t}\n\n\t\t\tnode._prevSource = evalContext._sources;\n\t\t\tnode._nextSource = undefined;\n\n\t\t\tevalContext._sources!._nextSource = node;\n\t\t\tevalContext._sources = node;\n\t\t}\n\n\t\t// We can assume that the currently evaluated effect / computed signal is already\n\t\t// subscribed to change notifications from `signal` if needed.\n\t\treturn node;\n\t}\n\treturn undefined;\n}\n\n// @ts-ignore internal Signal is viewed as a function\ndeclare class Signal<T = any> {\n\t/** @internal */\n\t_value: unknown;\n\n\t/**\n\t * @internal\n\t * Version numbers should always be >= 0, because the special value -1 is used\n\t * by Nodes to signify potentially unused but recyclable nodes.\n\t */\n\t_version: number;\n\n\t/** @internal */\n\t_node?: Node;\n\n\t/** @internal */\n\t_targets?: Node;\n\n\tconstructor(value?: T);\n\n\t/** @internal */\n\t_refresh(): boolean;\n\n\t/** @internal */\n\t_subscribe(node: Node): void;\n\n\t/** @internal */\n\t_unsubscribe(node: Node): void;\n\n\tsubscribe(fn: (value: T) => void): () => void;\n\n\tvalueOf(): T;\n\n\ttoString(): string;\n\n\ttoJSON(): T;\n\n\tpeek(): T;\n\n\tget value(): T;\n\tset value(value: T);\n}\n\n/** @internal */\n// @ts-ignore internal Signal is viewed as function\nfunction Signal(this: Signal, value?: unknown) {\n\tthis._value = value;\n\tthis._version = 0;\n\tthis._node = undefined;\n\tthis._targets = undefined;\n}\n\nSignal.prototype._refresh = function () {\n\treturn true;\n};\n\nSignal.prototype._subscribe = function (node) {\n\tif (this._targets !== node && node._prevTarget === undefined) {\n\t\tnode._nextTarget = this._targets;\n\t\tif (this._targets !== undefined) {\n\t\t\tthis._targets._prevTarget = node;\n\t\t}\n\t\tthis._targets = node;\n\t}\n};\n\nSignal.prototype._unsubscribe = function (node) {\n\t// Only run the unsubscribe step if the signal has any subscribers to begin with.\n\tif (this._targets !== undefined) {\n\t\tconst prev = node._prevTarget;\n\t\tconst next = node._nextTarget;\n\t\tif (prev !== undefined) {\n\t\t\tprev._nextTarget = next;\n\t\t\tnode._prevTarget = undefined;\n\t\t}\n\t\tif (next !== undefined) {\n\t\t\tnext._prevTarget = prev;\n\t\t\tnode._nextTarget = undefined;\n\t\t}\n\t\tif (node === this._targets) {\n\t\t\tthis._targets = next;\n\t\t}\n\t}\n};\n\nSignal.prototype.subscribe = function (fn) {\n\tconst signal = this;\n\treturn effect(function (this: Effect) {\n\t\tconst value = signal.value;\n\t\tconst flag = this._flags & TRACKING;\n\t\tthis._flags &= ~TRACKING;\n\t\ttry {\n\t\t\tfn(value);\n\t\t} finally {\n\t\t\tthis._flags |= flag;\n\t\t}\n\t});\n};\n\nSignal.prototype.valueOf = function () {\n\treturn this.value;\n};\n\nSignal.prototype.toString = function () {\n\treturn this.value + \"\";\n};\n\nSignal.prototype.toJSON = function () {\n\treturn this.value;\n};\n\nSignal.prototype.peek = function () {\n\treturn this._value;\n};\n\nObject.defineProperty(Signal.prototype, \"value\", {\n\tget() {\n\t\tconst node = addDependency(this);\n\t\tif (node !== undefined) {\n\t\t\tnode._version = this._version;\n\t\t}\n\t\treturn this._value;\n\t},\n\tset(this: Signal, value) {\n\t\tif (evalContext instanceof Computed) {\n\t\t\tmutationDetected();\n\t\t}\n\n\t\tif (value !== this._value) {\n\t\t\tif (batchIteration > 100) {\n\t\t\t\tcycleDetected();\n\t\t\t}\n\n\t\t\tthis._value = value;\n\t\t\tthis._version++;\n\t\t\tglobalVersion++;\n\n\t\t\t/**@__INLINE__*/ startBatch();\n\t\t\ttry {\n\t\t\t\tfor (\n\t\t\t\t\tlet node = this._targets;\n\t\t\t\t\tnode !== undefined;\n\t\t\t\t\tnode = node._nextTarget\n\t\t\t\t) {\n\t\t\t\t\tnode._target._notify();\n\t\t\t\t}\n\t\t\t} finally {\n\t\t\t\tendBatch();\n\t\t\t}\n\t\t}\n\t},\n});\n\nfunction signal<T>(value: T): Signal<T> {\n\treturn new Signal(value);\n}\n\nfunction needsToRecompute(target: Computed | Effect): boolean {\n\t// Check the dependencies for changed values. The dependency list is already\n\t// in order of use. Therefore if multiple dependencies have changed values, only\n\t// the first used dependency is re-evaluated at this point.\n\tfor (\n\t\tlet node = target._sources;\n\t\tnode !== undefined;\n\t\tnode = node._nextSource\n\t) {\n\t\t// If there's a new version of the dependency before or after refreshing,\n\t\t// or the dependency has something blocking it from refreshing at all (e.g. a\n\t\t// dependency cycle), then we need to recompute.\n\t\tif (\n\t\t\tnode._source._version !== node._version ||\n\t\t\t!node._source._refresh() ||\n\t\t\tnode._source._version !== node._version\n\t\t) {\n\t\t\treturn true;\n\t\t}\n\t}\n\t// If none of the dependencies have changed values since last recompute then\n\t// there's no need to recompute.\n\treturn false;\n}\n\nfunction prepareSources(target: Computed | Effect) {\n\t/**\n\t * 1. Mark all current sources as re-usable nodes (version: -1)\n\t * 2. Set a rollback node if the current node is being used in a different context\n\t * 3. Point 'target._sources' to the tail of the doubly-linked list, e.g:\n\t *\n\t *    { undefined <- A <-> B <-> C -> undefined }\n\t *                   ↑           ↑\n\t *                   │           └──────┐\n\t * target._sources = A; (node is head)  │\n\t *                   ↓                  │\n\t * target._sources = C; (node is tail) ─┘\n\t */\n\tfor (\n\t\tlet node = target._sources;\n\t\tnode !== undefined;\n\t\tnode = node._nextSource\n\t) {\n\t\tconst rollbackNode = node._source._node;\n\t\tif (rollbackNode !== undefined) {\n\t\t\tnode._rollbackNode = rollbackNode;\n\t\t}\n\t\tnode._source._node = node;\n\t\tnode._version = -1;\n\n\t\tif (node._nextSource === undefined) {\n\t\t\ttarget._sources = node;\n\t\t\tbreak;\n\t\t}\n\t}\n}\n\nfunction cleanupSources(target: Computed | Effect) {\n\tlet node = target._sources;\n\tlet head = undefined;\n\n\t/**\n\t * At this point 'target._sources' points to the tail of the doubly-linked list.\n\t * It contains all existing sources + new sources in order of use.\n\t * Iterate backwards until we find the head node while dropping old dependencies.\n\t */\n\twhile (node !== undefined) {\n\t\tconst prev = node._prevSource;\n\n\t\t/**\n\t\t * The node was not re-used, unsubscribe from its change notifications and remove itself\n\t\t * from the doubly-linked list. e.g:\n\t\t *\n\t\t * { A <-> B <-> C }\n\t\t *         ↓\n\t\t *    { A <-> C }\n\t\t */\n\t\tif (node._version === -1) {\n\t\t\tnode._source._unsubscribe(node);\n\n\t\t\tif (prev !== undefined) {\n\t\t\t\tprev._nextSource = node._nextSource;\n\t\t\t}\n\t\t\tif (node._nextSource !== undefined) {\n\t\t\t\tnode._nextSource._prevSource = prev;\n\t\t\t}\n\t\t} else {\n\t\t\t/**\n\t\t\t * The new head is the last node seen which wasn't removed/unsubscribed\n\t\t\t * from the doubly-linked list. e.g:\n\t\t\t *\n\t\t\t * { A <-> B <-> C }\n\t\t\t *   ↑     ↑     ↑\n\t\t\t *   │     │     └ head = node\n\t\t\t *   │     └ head = node\n\t\t\t *   └ head = node\n\t\t\t */\n\t\t\thead = node;\n\t\t}\n\n\t\tnode._source._node = node._rollbackNode;\n\t\tif (node._rollbackNode !== undefined) {\n\t\t\tnode._rollbackNode = undefined;\n\t\t}\n\n\t\tnode = prev;\n\t}\n\n\ttarget._sources = head;\n}\n\ndeclare class Computed<T = any> extends Signal<T> {\n\t_compute: () => T;\n\t_sources?: Node;\n\t_globalVersion: number;\n\t_flags: number;\n\n\tconstructor(compute: () => T);\n\n\t_notify(): void;\n\tget value(): T;\n}\n\nfunction Computed(this: Computed, compute: () => unknown) {\n\tSignal.call(this, undefined);\n\n\tthis._compute = compute;\n\tthis._sources = undefined;\n\tthis._globalVersion = globalVersion - 1;\n\tthis._flags = OUTDATED;\n}\n\nComputed.prototype = new Signal() as Computed;\n\nComputed.prototype._refresh = function () {\n\tthis._flags &= ~NOTIFIED;\n\n\tif (this._flags & RUNNING) {\n\t\treturn false;\n\t}\n\n\t// If this computed signal has subscribed to updates from its dependencies\n\t// (TRACKING flag set) and none of them have notified about changes (OUTDATED\n\t// flag not set), then the computed value can't have changed.\n\tif ((this._flags & (OUTDATED | TRACKING)) === TRACKING) {\n\t\treturn true;\n\t}\n\tthis._flags &= ~OUTDATED;\n\n\tif (this._globalVersion === globalVersion) {\n\t\treturn true;\n\t}\n\tthis._globalVersion = globalVersion;\n\n\t// Mark this computed signal running before checking the dependencies for value\n\t// changes, so that the RUNNING flag can be used to notice cyclical dependencies.\n\tthis._flags |= RUNNING;\n\tif (this._version > 0 && !needsToRecompute(this)) {\n\t\tthis._flags &= ~RUNNING;\n\t\treturn true;\n\t}\n\n\tconst prevContext = evalContext;\n\ttry {\n\t\tprepareSources(this);\n\t\tevalContext = this;\n\t\tconst value = this._compute();\n\t\tif (\n\t\t\tthis._flags & HAS_ERROR ||\n\t\t\tthis._value !== value ||\n\t\t\tthis._version === 0\n\t\t) {\n\t\t\tthis._value = value;\n\t\t\tthis._flags &= ~HAS_ERROR;\n\t\t\tthis._version++;\n\t\t}\n\t} catch (err) {\n\t\tthis._value = err;\n\t\tthis._flags |= HAS_ERROR;\n\t\tthis._version++;\n\t}\n\tevalContext = prevContext;\n\tcleanupSources(this);\n\tthis._flags &= ~RUNNING;\n\treturn true;\n};\n\nComputed.prototype._subscribe = function (node) {\n\tif (this._targets === undefined) {\n\t\tthis._flags |= OUTDATED | TRACKING;\n\n\t\t// A computed signal subscribes lazily to its dependencies when the it\n\t\t// gets its first subscriber.\n\t\tfor (\n\t\t\tlet node = this._sources;\n\t\t\tnode !== undefined;\n\t\t\tnode = node._nextSource\n\t\t) {\n\t\t\tnode._source._subscribe(node);\n\t\t}\n\t}\n\tSignal.prototype._subscribe.call(this, node);\n};\n\nComputed.prototype._unsubscribe = function (node) {\n\t// Only run the unsubscribe step if the computed signal has any subscribers.\n\tif (this._targets !== undefined) {\n\t\tSignal.prototype._unsubscribe.call(this, node);\n\n\t\t// Computed signal unsubscribes from its dependencies when it loses its last subscriber.\n\t\t// This makes it possible for unreferences subgraphs of computed signals to get garbage collected.\n\t\tif (this._targets === undefined) {\n\t\t\tthis._flags &= ~TRACKING;\n\n\t\t\tfor (\n\t\t\t\tlet node = this._sources;\n\t\t\t\tnode !== undefined;\n\t\t\t\tnode = node._nextSource\n\t\t\t) {\n\t\t\t\tnode._source._unsubscribe(node);\n\t\t\t}\n\t\t}\n\t}\n};\n\nComputed.prototype._notify = function () {\n\tif (!(this._flags & NOTIFIED)) {\n\t\tthis._flags |= OUTDATED | NOTIFIED;\n\n\t\tfor (\n\t\t\tlet node = this._targets;\n\t\t\tnode !== undefined;\n\t\t\tnode = node._nextTarget\n\t\t) {\n\t\t\tnode._target._notify();\n\t\t}\n\t}\n};\n\nComputed.prototype.peek = function () {\n\tif (!this._refresh()) {\n\t\tcycleDetected();\n\t}\n\tif (this._flags & HAS_ERROR) {\n\t\tthrow this._value;\n\t}\n\treturn this._value;\n};\n\nObject.defineProperty(Computed.prototype, \"value\", {\n\tget() {\n\t\tif (this._flags & RUNNING) {\n\t\t\tcycleDetected();\n\t\t}\n\t\tconst node = addDependency(this);\n\t\tthis._refresh();\n\t\tif (node !== undefined) {\n\t\t\tnode._version = this._version;\n\t\t}\n\t\tif (this._flags & HAS_ERROR) {\n\t\t\tthrow this._value;\n\t\t}\n\t\treturn this._value;\n\t},\n});\n\ninterface ReadonlySignal<T = any> extends Signal<T> {\n\treadonly value: T;\n}\n\nfunction computed<T>(compute: () => T): ReadonlySignal<T> {\n\treturn new Computed(compute);\n}\n\nfunction cleanupEffect(effect: Effect) {\n\tconst cleanup = effect._cleanup;\n\teffect._cleanup = undefined;\n\n\tif (typeof cleanup === \"function\") {\n\t\t/*@__INLINE__**/ startBatch();\n\n\t\t// Run cleanup functions always outside of any context.\n\t\tconst prevContext = evalContext;\n\t\tevalContext = undefined;\n\t\ttry {\n\t\t\tcleanup();\n\t\t} catch (err) {\n\t\t\teffect._flags &= ~RUNNING;\n\t\t\teffect._flags |= DISPOSED;\n\t\t\tdisposeEffect(effect);\n\t\t\tthrow err;\n\t\t} finally {\n\t\t\tevalContext = prevContext;\n\t\t\tendBatch();\n\t\t}\n\t}\n}\n\nfunction disposeEffect(effect: Effect) {\n\tfor (\n\t\tlet node = effect._sources;\n\t\tnode !== undefined;\n\t\tnode = node._nextSource\n\t) {\n\t\tnode._source._unsubscribe(node);\n\t}\n\teffect._compute = undefined;\n\teffect._sources = undefined;\n\n\tcleanupEffect(effect);\n}\n\nfunction endEffect(this: Effect, prevContext?: Computed | Effect) {\n\tif (evalContext !== this) {\n\t\tthrow new Error(\"Out-of-order effect\");\n\t}\n\tcleanupSources(this);\n\tevalContext = prevContext;\n\n\tthis._flags &= ~RUNNING;\n\tif (this._flags & DISPOSED) {\n\t\tdisposeEffect(this);\n\t}\n\tendBatch();\n}\n\ndeclare class Effect {\n\t_compute?: () => void | (() => void);\n\t_cleanup?: () => void;\n\t_sources?: Node;\n\t_nextBatchedEffect?: Effect;\n\t_flags: number;\n\n\tconstructor(compute: () => void | (() => void));\n\n\t_callback(): void;\n\t_start(): () => void;\n\t_notify(): void;\n\t_dispose(): void;\n}\n\nfunction Effect(this: Effect, compute: () => void | (() => void)) {\n\tthis._compute = compute;\n\tthis._cleanup = undefined;\n\tthis._sources = undefined;\n\tthis._nextBatchedEffect = undefined;\n\tthis._flags = TRACKING;\n}\n\nEffect.prototype._callback = function () {\n\tconst finish = this._start();\n\ttry {\n\t\tif (this._flags & DISPOSED) return;\n\t\tif (this._compute === undefined) return;\n\n\t\tconst cleanup = this._compute();\n\t\tif (typeof cleanup === \"function\") {\n\t\t\tthis._cleanup = cleanup;\n\t\t}\n\t} finally {\n\t\tfinish();\n\t}\n};\n\nEffect.prototype._start = function () {\n\tif (this._flags & RUNNING) {\n\t\tcycleDetected();\n\t}\n\tthis._flags |= RUNNING;\n\tthis._flags &= ~DISPOSED;\n\tcleanupEffect(this);\n\tprepareSources(this);\n\n\t/*@__INLINE__**/ startBatch();\n\tconst prevContext = evalContext;\n\tevalContext = this;\n\treturn endEffect.bind(this, prevContext);\n};\n\nEffect.prototype._notify = function () {\n\tif (!(this._flags & NOTIFIED)) {\n\t\tthis._flags |= NOTIFIED;\n\t\tthis._nextBatchedEffect = batchedEffect;\n\t\tbatchedEffect = this;\n\t}\n};\n\nEffect.prototype._dispose = function () {\n\tthis._flags |= DISPOSED;\n\n\tif (!(this._flags & RUNNING)) {\n\t\tdisposeEffect(this);\n\t}\n};\n\nfunction effect(compute: () => void | (() => void)): () => void {\n\tconst effect = new Effect(compute);\n\ttry {\n\t\teffect._callback();\n\t} catch (err) {\n\t\teffect._dispose();\n\t\tthrow err;\n\t}\n\t// Return a bound function instead of a wrapper like `() => effect._dispose()`,\n\t// because bound functions seem to be just as fast and take up a lot less memory.\n\treturn effect._dispose.bind(effect);\n}\n\nexport { signal, computed, effect, batch, Signal, type ReadonlySignal };\n", "import { options, Component } from \"preact\";\nimport { useRef, useMemo, useEffect } from \"preact/hooks\";\nimport {\n\tsignal,\n\tcomputed,\n\tbatch,\n\teffect,\n\tSignal,\n\ttype ReadonlySignal,\n} from \"@preact/signals-core\";\nimport {\n\tVNode,\n\tOptionsTypes,\n\tHookFn,\n\tEffect,\n\tPropertyUpdater,\n\tAugmentedComponent,\n\tAugmentedElement as Element,\n} from \"./internal\";\n\nexport { signal, computed, batch, effect, Signal, type ReadonlySignal };\n\nconst HAS_PENDING_UPDATE = 1 << 0;\nconst HAS_HOOK_STATE = 1 << 1;\nconst HAS_COMPUTEDS = 1 << 2;\n\n// Install a Preact options hook\nfunction hook<T extends OptionsTypes>(hookName: T, hookFn: HookFn<T>) {\n\t// @ts-ignore-next-line private options hooks usage\n\toptions[hookName] = hookFn.bind(null, options[hookName] || (() => {}));\n}\n\nlet currentComponent: AugmentedComponent | undefined;\nlet finishUpdate: (() => void) | undefined;\n\nfunction setCurrentUpdater(updater?: Effect) {\n\t// end tracking for the current update:\n\tif (finishUpdate) finishUpdate();\n\t// start tracking the new update:\n\tfinishUpdate = updater && updater._start();\n}\n\nfunction createUpdater(update: () => void) {\n\tlet updater!: Effect;\n\teffect(function (this: Effect) {\n\t\tupdater = this;\n\t});\n\tupdater._callback = update;\n\treturn updater;\n}\n\n/** @todo This may be needed for complex prop value detection. */\n// function isSignalValue(value: any): value is Signal {\n// \tif (typeof value !== \"object\" || value == null) return false;\n// \tif (value instanceof Signal) return true;\n// \t// @TODO: uncomment this when we land Reactive (ideally behind a brand check)\n// \t// for (let i in value) if (value[i] instanceof Signal) return true;\n// \treturn false;\n// }\n\n/**\n * A wrapper component that renders a Signal directly as a Text node.\n * @todo: in Preact 11, just decorate Signal with `type:null`\n */\nfunction Text(this: AugmentedComponent, { data }: { data: Signal }) {\n\t// hasComputeds.add(this);\n\n\t// Store the props.data signal in another signal so that\n\t// passing a new signal reference re-runs the text computed:\n\tconst currentSignal = useSignal(data);\n\tcurrentSignal.value = data;\n\n\tconst s = useMemo(() => {\n\t\t// mark the parent component as having computeds so it gets optimized\n\t\tlet v = this.__v;\n\t\twhile ((v = v.__!)) {\n\t\t\tif (v.__c) {\n\t\t\t\tv.__c._updateFlags |= HAS_COMPUTEDS;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t// Replace this component's vdom updater with a direct text one:\n\t\tthis._updater!._callback = () => {\n\t\t\t(this.base as Text).data = s.peek();\n\t\t};\n\n\t\treturn computed(() => {\n\t\t\tlet data = currentSignal.value;\n\t\t\tlet s = data.value;\n\t\t\treturn s === 0 ? 0 : s === true ? \"\" : s || \"\";\n\t\t});\n\t}, []);\n\n\treturn s.value;\n}\nText.displayName = \"_st\";\n\nObject.defineProperties(Signal.prototype, {\n\tconstructor: { configurable: true, value: undefined },\n\ttype: { configurable: true, value: Text },\n\tprops: {\n\t\tconfigurable: true,\n\t\tget() {\n\t\t\treturn { data: this };\n\t\t},\n\t},\n\t// Setting a VNode's _depth to 1 forces Preact to clone it before modifying:\n\t// https://github.com/preactjs/preact/blob/d7a433ee8463a7dc23a05111bb47de9ec729ad4d/src/diff/children.js#L77\n\t// @todo remove this for Preact 11\n\t__b: { configurable: true, value: 1 },\n});\n\n/** Inject low-level property/attribute bindings for Signals into Preact's diff */\nhook(OptionsTypes.DIFF, (old, vnode) => {\n\tif (typeof vnode.type === \"string\") {\n\t\tlet signalProps: Record<string, any> | undefined;\n\n\t\tlet props = vnode.props;\n\t\tfor (let i in props) {\n\t\t\tif (i === \"children\") continue;\n\n\t\t\tlet value = props[i];\n\t\t\tif (value instanceof Signal) {\n\t\t\t\tif (!signalProps) vnode.__np = signalProps = {};\n\t\t\t\tsignalProps[i] = value;\n\t\t\t\tprops[i] = value.peek();\n\t\t\t}\n\t\t}\n\t}\n\n\told(vnode);\n});\n\n/** Set up Updater before rendering a component */\nhook(OptionsTypes.RENDER, (old, vnode) => {\n\tsetCurrentUpdater();\n\n\tlet updater;\n\n\tlet component = vnode.__c;\n\tif (component) {\n\t\tcomponent._updateFlags &= ~HAS_PENDING_UPDATE;\n\n\t\tupdater = component._updater;\n\t\tif (updater === undefined) {\n\t\t\tcomponent._updater = updater = createUpdater(() => {\n\t\t\t\tcomponent._updateFlags |= HAS_PENDING_UPDATE;\n\t\t\t\tcomponent.setState({});\n\t\t\t});\n\t\t}\n\t}\n\n\tcurrentComponent = component;\n\tsetCurrentUpdater(updater);\n\told(vnode);\n});\n\n/** Finish current updater if a component errors */\nhook(OptionsTypes.CATCH_ERROR, (old, error, vnode, oldVNode) => {\n\tsetCurrentUpdater();\n\tcurrentComponent = undefined;\n\told(error, vnode, oldVNode);\n});\n\n/** Finish current updater after rendering any VNode */\nhook(OptionsTypes.DIFFED, (old, vnode) => {\n\tsetCurrentUpdater();\n\tcurrentComponent = undefined;\n\n\tlet dom: Element;\n\n\t// vnode._dom is undefined during string rendering,\n\t// so we use this to skip prop subscriptions during SSR.\n\tif (typeof vnode.type === \"string\" && (dom = vnode.__e as Element)) {\n\t\tlet props = vnode.__np;\n\t\tlet renderedProps = vnode.props;\n\t\tif (props) {\n\t\t\tlet updaters = dom._updaters;\n\t\t\tif (updaters) {\n\t\t\t\tfor (let prop in updaters) {\n\t\t\t\t\tlet updater = updaters[prop];\n\t\t\t\t\tif (updater !== undefined && !(prop in props)) {\n\t\t\t\t\t\tupdater._dispose();\n\t\t\t\t\t\t// @todo we could just always invoke _dispose() here\n\t\t\t\t\t\tupdaters[prop] = undefined;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tupdaters = {};\n\t\t\t\tdom._updaters = updaters;\n\t\t\t}\n\t\t\tfor (let prop in props) {\n\t\t\t\tlet updater = updaters[prop];\n\t\t\t\tlet signal = props[prop];\n\t\t\t\tif (updater === undefined) {\n\t\t\t\t\tupdater = createPropUpdater(dom, prop, signal, renderedProps);\n\t\t\t\t\tupdaters[prop] = updater;\n\t\t\t\t} else {\n\t\t\t\t\tupdater._update(signal, renderedProps);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\told(vnode);\n});\n\nfunction createPropUpdater(\n\tdom: Element,\n\tprop: string,\n\tpropSignal: Signal,\n\tprops: Record<string, any>\n): PropertyUpdater {\n\tconst setAsProperty =\n\t\tprop in dom &&\n\t\t// SVG elements need to go through `setAttribute` because they\n\t\t// expect things like SVGAnimatedTransformList instead of strings.\n\t\t// @ts-ignore\n\t\tdom.ownerSVGElement === undefined;\n\n\tconst changeSignal = signal(propSignal);\n\treturn {\n\t\t_update: (newSignal: Signal, newProps: typeof props) => {\n\t\t\tchangeSignal.value = newSignal;\n\t\t\tprops = newProps;\n\t\t},\n\t\t_dispose: effect(() => {\n\t\t\tconst value = changeSignal.value.value;\n\t\t\t// If Preact just rendered this value, don't render it again:\n\t\t\tif (props[prop] === value) return;\n\t\t\tprops[prop] = value;\n\t\t\tif (setAsProperty) {\n\t\t\t\t// @ts-ignore-next-line silly\n\t\t\t\tdom[prop] = value;\n\t\t\t} else if (value) {\n\t\t\t\tdom.setAttribute(prop, value);\n\t\t\t} else {\n\t\t\t\tdom.removeAttribute(prop);\n\t\t\t}\n\t\t}),\n\t};\n}\n\n/** Unsubscribe from Signals when unmounting components/vnodes */\nhook(OptionsTypes.UNMOUNT, (old, vnode: VNode) => {\n\tif (typeof vnode.type === \"string\") {\n\t\tlet dom = vnode.__e as Element | undefined;\n\t\t// vnode._dom is undefined during string rendering\n\t\tif (dom) {\n\t\t\tconst updaters = dom._updaters;\n\t\t\tif (updaters) {\n\t\t\t\tdom._updaters = undefined;\n\t\t\t\tfor (let prop in updaters) {\n\t\t\t\t\tlet updater = updaters[prop];\n\t\t\t\t\tif (updater) updater._dispose();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t} else {\n\t\tlet component = vnode.__c;\n\t\tif (component) {\n\t\t\tconst updater = component._updater;\n\t\t\tif (updater) {\n\t\t\t\tcomponent._updater = undefined;\n\t\t\t\tupdater._dispose();\n\t\t\t}\n\t\t}\n\t}\n\told(vnode);\n});\n\n/** Mark components that use hook state so we can skip sCU optimization. */\nhook(OptionsTypes.HOOK, (old, component, index, type) => {\n\tif (type < 3)\n\t\t(component as AugmentedComponent)._updateFlags |= HAS_HOOK_STATE;\n\told(component, index, type);\n});\n\n/**\n * Auto-memoize components that use Signals/Computeds.\n * Note: Does _not_ optimize components that use hook/class state.\n */\nComponent.prototype.shouldComponentUpdate = function (\n\tthis: AugmentedComponent,\n\tprops,\n\tstate\n) {\n\t// @todo: Once preactjs/preact#3671 lands, this could just use `currentUpdater`:\n\tconst updater = this._updater;\n\tconst hasSignals = updater && updater._sources !== undefined;\n\n\t// let reason;\n\t// if (!hasSignals && !hasComputeds.has(this)) {\n\t// \treason = \"no signals or computeds\";\n\t// } else if (hasPendingUpdate.has(this)) {\n\t// \treason = \"has pending update\";\n\t// } else if (hasHookState.has(this)) {\n\t// \treason = \"has hook state\";\n\t// }\n\t// if (reason) {\n\t// \tif (!this) reason += \" (`this` bug)\";\n\t// \tconsole.log(\"not optimizing\", this?.constructor?.name, \": \", reason, {\n\t// \t\tdetails: {\n\t// \t\t\thasSignals,\n\t// \t\t\thasComputeds: hasComputeds.has(this),\n\t// \t\t\thasPendingUpdate: hasPendingUpdate.has(this),\n\t// \t\t\thasHookState: hasHookState.has(this),\n\t// \t\t\tdeps: Array.from(updater._deps),\n\t// \t\t\tupdater,\n\t// \t\t},\n\t// \t});\n\t// }\n\n\t// if this component used no signals or computeds, update:\n\tif (!hasSignals && !(this._updateFlags & HAS_COMPUTEDS)) return true;\n\n\t// if there is a pending re-render triggered from Signals,\n\t// or if there is hook or class state, update:\n\tif (this._updateFlags & (HAS_PENDING_UPDATE | HAS_HOOK_STATE)) return true;\n\n\t// @ts-ignore\n\tfor (let i in state) return true;\n\n\t// if any non-Signal props changed, update:\n\tfor (let i in props) {\n\t\tif (i !== \"__source\" && props[i] !== this.props[i]) return true;\n\t}\n\tfor (let i in this.props) if (!(i in props)) return true;\n\n\t// this is a purely Signal-driven component, don't update:\n\treturn false;\n};\n\nexport function useSignal<T>(value: T) {\n\treturn useMemo(() => signal<T>(value), []);\n}\n\nexport function useComputed<T>(compute: () => T) {\n\tconst $compute = useRef(compute);\n\t$compute.current = compute;\n\t(currentComponent as AugmentedComponent)._updateFlags |= HAS_COMPUTEDS;\n\treturn useMemo(() => computed<T>(() => $compute.current()), []);\n}\n\nexport function useSignalEffect(cb: () => void | (() => void)) {\n\tconst callback = useRef(cb);\n\tcallback.current = cb;\n\n\tuseEffect(() => {\n\t\treturn effect(() => callback.current());\n\t}, []);\n}\n\n/**\n * @todo Determine which Reactive implementation we'll be using.\n * @internal\n */\n// export function useReactive<T extends object>(value: T): Reactive<T> {\n// \treturn useMemo(() => reactive<T>(value), []);\n// }\n\n/**\n * @internal\n * Update a Reactive's using the properties of an object or other Reactive.\n * Also works for Signals.\n * @example\n *   // Update a Reactive with Object.assign()-like syntax:\n *   const r = reactive({ name: \"Alice\" });\n *   update(r, { name: \"Bob\" });\n *   update(r, { age: 42 }); // property 'age' does not exist in type '{ name?: string }'\n *   update(r, 2); // '2' has no properties in common with '{ name?: string }'\n *   console.log(r.name.value); // \"Bob\"\n *\n * @example\n *   // Update a Reactive with the properties of another Reactive:\n *   const A = reactive({ name: \"Alice\" });\n *   const B = reactive({ name: \"Bob\", age: 42 });\n *   update(A, B);\n *   console.log(`${A.name} is ${A.age}`); // \"Bob is 42\"\n *\n * @example\n *   // Update a signal with assign()-like syntax:\n *   const s = signal(42);\n *   update(s, \"hi\"); // Argument type 'string' not assignable to type 'number'\n *   update(s, {}); // Argument type '{}' not assignable to type 'number'\n *   update(s, 43);\n *   console.log(s.value); // 43\n *\n * @param obj The Reactive or Signal to be updated\n * @param update The value, Signal, object or Reactive to update `obj` to match\n * @param overwrite If `true`, any properties `obj` missing from `update` are set to `undefined`\n */\n/*\nexport function update<T extends SignalOrReactive>(\n\tobj: T,\n\tupdate: Partial<Unwrap<T>>,\n\toverwrite = false\n) {\n\tif (obj instanceof Signal) {\n\t\tobj.value = peekValue(update);\n\t} else {\n\t\tfor (let i in update) {\n\t\t\tif (i in obj) {\n\t\t\t\tobj[i].value = peekValue(update[i]);\n\t\t\t} else {\n\t\t\t\tlet sig = signal(peekValue(update[i]));\n\t\t\t\tsig[KEY] = i;\n\t\t\t\tobj[i] = sig;\n\t\t\t}\n\t\t}\n\t\tif (overwrite) {\n\t\t\tfor (let i in obj) {\n\t\t\t\tif (!(i in update)) {\n\t\t\t\t\tobj[i].value = undefined;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n*/\n"],
  "mappings": "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",
  "names": ["currentIndex", "currentComponent", "previousComponent", "prevRaf", "currentHook", "afterPaintEffects", "EMPTY", "oldBeforeDiff", "options", "__b", "oldBeforeRender", "__r", "oldAfterDiff", "diffed", "oldCommit", "__c", "oldBeforeUnmount", "unmount", "getHookState", "index", "type", "__h", "hooks", "__H", "__", "length", "push", "__V", "useEffect", "callback", "args", "state", "getHookState", "currentIndex", "options", "__s", "argsChanged", "__H", "__", "_pendingArgs", "currentComponent", "__h", "push", "useRef", "initialValue", "currentHook", "useMemo", "current", "useMemo", "factory", "args", "state", "getHookState", "currentIndex", "argsChanged", "__V", "_pendingArgs", "__h", "__", "flushAfterPaintEffects", "component", "afterPaintEffects", "shift", "__P", "__H", "__h", "forEach", "invokeCleanup", "invokeEffect", "e", "options", "__e", "__v", "__b", "vnode", "currentComponent", "oldBeforeDiff", "__r", "oldBeforeRender", "currentIndex", "hooks", "__c", "previousComponent", "__", "hookItem", "__N", "EMPTY", "_pendingArgs", "diffed", "oldAfterDiff", "c", "length", "push", "prevRaf", "requestAnimationFrame", "afterNextFrame", "__V", "commitQueue", "some", "filter", "cb", "oldCommit", "unmount", "oldBeforeUnmount", "hasErrored", "s", "HAS_RAF", "callback", "raf", "done", "clearTimeout", "timeout", "cancelAnimationFrame", "setTimeout", "hook", "comp", "cleanup", "argsChanged", "oldArgs", "newArgs", "arg", "index", "cycleDetected", "Error", "endBatch", "batchDepth", "error", "hasError", "batchedEffect", "o", "batchIteration", "effect", "next", "_nextBatchedEffect", "_flags", "needsToRecompute", "_callback", "err", "batch", "callback", "evalContext", "globalVersion", "addDependency", "signal", "node", "_node", "_target", "_version", "_source", "_prevSource", "_sources", "_nextSource", "_prevTarget", "_nextTarget", "_rollbackNode", "_subscribe", "Signal", "value", "this", "_value", "_targets", "prototype", "_refresh", "_unsubscribe", "prev", "subscribe", "fn", "flag", "valueOf", "toString", "toJSON", "peek", "Object", "defineProperty", "get", "set", "Computed", "mutationDetected", "_notify", "target", "prepareSources", "rollbackNode", "cleanupSources", "head", "compute", "call", "undefined", "_compute", "_globalVersion", "prevContext", "OUTDATED", "_node2", "computed", "cleanupEffect", "cleanup", "_cleanup", "disposeEffect", "endEffect", "g", "Effect", "finish", "_start", "t", "bind", "_dispose", "currentComponent", "hook", "hookName", "hookFn", "options", "bind", "setCurrentUpdater", "updater", "finishUpdate", "_start", "Text", "_ref", "data", "currentSignal", "useSignal", "value", "s", "useMemo", "v", "_this", "__v", "__", "__c", "_updateFlags", "_updater", "_callback", "base", "peek", "computed", "n", "displayName", "Object", "defineProperties", "Signal", "prototype", "constructor", "configurable", "undefined", "type", "props", "get", "this", "__b", "old", "vnode", "i", "signalProps", "__np", "component", "update", "effect", "setState", "r", "createUpdater", "error", "oldVNode", "dom", "__e", "renderedProps", "o", "_updaters", "updaters", "prop", "_dispose", "_signal", "createPropUpdater", "signal", "_update", "propSignal", "setAsProperty", "ownerSVGElement", "changeSignal", "newSignal", "newProps", "setAttribute", "removeAttribute", "_updater2", "index", "Component", "shouldComponentUpdate", "state", "_sources", "HAS_PENDING_UPDATE", "_i", "useComputed", "compute", "$compute", "useRef", "current", "useSignalEffect", "cb", "callback", "useEffect"]
}
